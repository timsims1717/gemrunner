package load

import (
	"gemrunner/internal/constants"
	"gemrunner/internal/data"
	"gemrunner/pkg/world"
	"github.com/gopxl/pixel"
)

var (
	// editor panels
	editorPanelTopConstructor  *data.DialogConstructor
	editorPanelLeftConstructor *data.DialogConstructor
	editorOptBottomConstructor *data.DialogConstructor
	editorOptRightConstructor  *data.DialogConstructor
	// editor options dialogs
	openPuzzleConstructor          *data.DialogConstructor
	changeNameConstructor          *data.DialogConstructor
	noPlayersInPuzzleConstructor   *data.DialogConstructor
	areYouSureDeleteConstructor    *data.DialogConstructor
	unableToSaveConstructor        *data.DialogConstructor
	unableToSaveConfirmConstructor *data.DialogConstructor
	worldDialogConstructor         *data.DialogConstructor
	worldListEntry                 data.ElementConstructor
	turfTileItem                   data.ElementConstructor
	ladderTileItem                 data.ElementConstructor
	doodadTileItem                 data.ElementConstructor
	worldTxtItem                   data.ElementConstructor
	// editor mode dialogs
	crackedTileOptionsConstructor *data.DialogConstructor
	bombOptionsConstructor        *data.DialogConstructor
)

func InitConstructors() {
	// Editor Options
	openPuzzleConstructor = &data.DialogConstructor{
		Key:    constants.DialogOpenPuzzle,
		Width:  11,
		Height: 10,
		Elements: []data.ElementConstructor{
			{
				Key:      "open_title",
				Text:     "Open Puzzle Group",
				Position: pixel.V(-84, 72),
				Element:  data.TextElement,
			},
			{
				Key:         "cancel_open_puzzle",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(72, -64),
				Element:     data.ButtonElement,
			},
			{
				Key:         "open_puzzle",
				SprKey:      "open_btn_big",
				ClickSprKey: "open_btn_click_big",
				HelpText:    "Open",
				Position:    pixel.V(52, -64),
				Element:     data.ButtonElement,
			},
			{
				Key:      "puzzle_list",
				HelpText: "The list of puzzles.",
				Element:  data.ScrollElement,
				Position: pixel.V(0, 8),
				Width:    10,
				Height:   7,
			},
		},
	}
	changeNameConstructor = &data.DialogConstructor{
		Key:    constants.DialogChangeName,
		Width:  12,
		Height: 4,
		Elements: []data.ElementConstructor{
			{
				Key:      "change_name_title",
				Text:     "Puzzle Set Name",
				Position: pixel.V(-92, 24),
				Element:  data.TextElement,
			},
			{
				Key:         "cancel_puzzle_name",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(84, -20),
				Element:     data.ButtonElement,
			},
			{
				Key:         "check_puzzle_name",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(64, -20),
				Element:     data.ButtonElement,
			},
			{
				Key:      "puzzle_name",
				Text:     "Untitled",
				HelpText: "Enter the name of the puzzle here.",
				Element:  data.InputElement,
				Position: pixel.V(0, 4),
				Width:    11,
				Height:   1,
			},
		},
	}
	noPlayersInPuzzleConstructor = &data.DialogConstructor{
		Key:    constants.DialogNoPlayersInPuzzle,
		Width:  8,
		Height: 3,
		Elements: []data.ElementConstructor{
			{
				Key:      "no_players_msg",
				Text:     "You don't have any\nplayers in your\npuzzle.",
				Position: pixel.V(-56, 16),
				Element:  data.TextElement,
			},
			{
				Key:         "check_no_players",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(52, -12),
				Element:     data.ButtonElement,
			},
		},
	}
	areYouSureDeleteConstructor = &data.DialogConstructor{
		Key:    constants.DialogAreYouSureDelete,
		Width:  8,
		Height: 3,
		Elements: []data.ElementConstructor{
			{
				Key:      "are_you_sure_msg",
				Text:     "Are you sure?\nThis can't be undone.",
				Position: pixel.V(-56, 16),
				Element:  data.TextElement,
			},
			{
				Key:         "confirm_delete",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(32, -12),
				Element:     data.ButtonElement,
			},
			{
				Key:         "cancel_delete",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(52, -12),
				Element:     data.ButtonElement,
			},
		},
	}
	unableToSaveConstructor = &data.DialogConstructor{
		Key:    constants.DialogUnableToSave,
		Width:  8,
		Height: 3,
		Elements: []data.ElementConstructor{
			{
				Key:      "unable_to_save_msg",
				Text:     "There was an error\nwhen trying to save\nyour puzzle.",
				Position: pixel.V(-56, 16),
				Element:  data.TextElement,
			},
			{
				Key:         "confirm_unable_to_save",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(52, -12),
				Element:     data.ButtonElement,
			},
		},
	}
	unableToSaveConfirmConstructor = &data.DialogConstructor{
		Key:    constants.DialogUnableToSaveConfirm,
		Width:  8,
		Height: 4,
		Elements: []data.ElementConstructor{
			{
				Key:      "unable_to_save_msg",
				Text:     "There was an error\nwhen trying to save\nyour puzzle.\nDo you want to do\nthat anyway?",
				Position: pixel.V(-56, 24),
				Element:  data.TextElement,
			},
			{
				Key:         "confirm_unable_to_save",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(32, -20),
				Element:     data.ButtonElement,
			},
			{
				Key:         "cancel_unable_to_save",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(52, -20),
				Element:     data.ButtonElement,
			},
		},
	}
	worldDialogConstructor = &data.DialogConstructor{
		Key:    constants.DialogChangeWorld,
		Width:  16,
		Height: 12,
		Elements: []data.ElementConstructor{
			{
				Key:      "change_world_title",
				Text:     "Change World",
				Position: pixel.V(-124, 88),
				Element:  data.TextElement,
			},
			{
				Key:      "current_world",
				Text:     "World -",
				Position: pixel.V(16, 64),
				Element:  data.TextElement,
			},
			{
				Key:      "custom_text",
				Text:     "Custom Colors",
				Position: pixel.V(16, 80),
				Element:  data.TextElement,
			},
			{
				Key:         "custom_world_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Customize this puzzle's colors.",
				Position:    pixel.V(112, 80),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "primary_text",
				Text:     "Primary Color",
				Position: pixel.V(16, 64),
				Element:  data.TextElement,
			},
			{
				Key:      "red_color_primary",
				SprKey:   "red_square",
				Position: pixel.V(24, 48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "red_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Red",
				Position:    pixel.V(24, 48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "orange_color_primary",
				SprKey:   "orange_square",
				Position: pixel.V(40, 48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "orange_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Orange",
				Position:    pixel.V(40, 48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "green_color_primary",
				SprKey:   "green_square",
				Position: pixel.V(56, 48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "green_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Green",
				Position:    pixel.V(56, 48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "cyan_color_primary",
				SprKey:   "cyan_square",
				Position: pixel.V(72, 48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "cyan_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Cyan",
				Position:    pixel.V(72, 48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "blue_color_primary",
				SprKey:   "blue_square",
				Position: pixel.V(88, 48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "blue_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Blue",
				Position:    pixel.V(88, 48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "purple_color_primary",
				SprKey:   "purple_square",
				Position: pixel.V(104, 48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "purple_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Purple",
				Position:    pixel.V(104, 48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "yellow_color_primary",
				SprKey:   "yellow_square",
				Position: pixel.V(24, 32),
				Element:  data.SpriteElement,
			},
			{
				Key:         "yellow_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Yellow",
				Position:    pixel.V(24, 32),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "gold_color_primary",
				SprKey:   "gold_square",
				Position: pixel.V(40, 32),
				Element:  data.SpriteElement,
			},
			{
				Key:         "gold_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Gold",
				Position:    pixel.V(40, 32),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "brown_color_primary",
				SprKey:   "brown_square",
				Position: pixel.V(56, 32),
				Element:  data.SpriteElement,
			},
			{
				Key:         "brown_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Brown",
				Position:    pixel.V(56, 32),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "tan_color_primary",
				SprKey:   "tan_square",
				Position: pixel.V(72, 32),
				Element:  data.SpriteElement,
			},
			{
				Key:         "tan_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Tan",
				Position:    pixel.V(72, 32),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "light_gray_color_primary",
				SprKey:   "light_gray_square",
				Position: pixel.V(88, 32),
				Element:  data.SpriteElement,
			},
			{
				Key:         "light_gray_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Light Gray",
				Position:    pixel.V(88, 32),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "gray_color_primary",
				SprKey:   "gray_square",
				Position: pixel.V(104, 32),
				Element:  data.SpriteElement,
			},
			{
				Key:         "gray_check_primary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Gray",
				Position:    pixel.V(104, 32),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "secondary_text",
				Text:     "Secondary Color",
				Position: pixel.V(16, 16),
				Element:  data.TextElement,
			},
			{
				Key:      "red_color_secondary",
				SprKey:   "red_square",
				Position: pixel.V(24, 0),
				Element:  data.SpriteElement,
			},
			{
				Key:         "red_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Red",
				Position:    pixel.V(24, 0),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "orange_color_secondary",
				SprKey:   "orange_square",
				Position: pixel.V(40, 0),
				Element:  data.SpriteElement,
			},
			{
				Key:         "orange_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Orange",
				Position:    pixel.V(40, 0),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "green_color_secondary",
				SprKey:   "green_square",
				Position: pixel.V(56, 0),
				Element:  data.SpriteElement,
			},
			{
				Key:         "green_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Green",
				Position:    pixel.V(56, 0),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "cyan_color_secondary",
				SprKey:   "cyan_square",
				Position: pixel.V(72, 0),
				Element:  data.SpriteElement,
			},
			{
				Key:         "cyan_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Cyan",
				Position:    pixel.V(72, 0),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "blue_color_secondary",
				SprKey:   "blue_square",
				Position: pixel.V(88, 0),
				Element:  data.SpriteElement,
			},
			{
				Key:         "blue_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Blue",
				Position:    pixel.V(88, 0),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "purple_color_secondary",
				SprKey:   "purple_square",
				Position: pixel.V(104, 0),
				Element:  data.SpriteElement,
			},
			{
				Key:         "purple_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Purple",
				Position:    pixel.V(104, 0),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "yellow_color_secondary",
				SprKey:   "yellow_square",
				Position: pixel.V(24, -16),
				Element:  data.SpriteElement,
			},
			{
				Key:         "yellow_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Yellow",
				Position:    pixel.V(24, -16),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "gold_color_secondary",
				SprKey:   "gold_square",
				Position: pixel.V(40, -16),
				Element:  data.SpriteElement,
			},
			{
				Key:         "gold_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Gold",
				Position:    pixel.V(40, -16),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "brown_color_secondary",
				SprKey:   "brown_square",
				Position: pixel.V(56, -16),
				Element:  data.SpriteElement,
			},
			{
				Key:         "brown_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Brown",
				Position:    pixel.V(56, -16),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "tan_color_secondary",
				SprKey:   "tan_square",
				Position: pixel.V(72, -16),
				Element:  data.SpriteElement,
			},
			{
				Key:         "tan_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Tan",
				Position:    pixel.V(72, -16),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "light_gray_color_secondary",
				SprKey:   "light_gray_square",
				Position: pixel.V(88, -16),
				Element:  data.SpriteElement,
			},
			{
				Key:         "light_gray_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Light Gray",
				Position:    pixel.V(88, -16),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "gray_color_secondary",
				SprKey:   "gray_square",
				Position: pixel.V(104, -16),
				Element:  data.SpriteElement,
			},
			{
				Key:         "gray_check_secondary",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Gray",
				Position:    pixel.V(104, -16),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "doodad_text",
				Text:     "Doodad Color",
				Position: pixel.V(16, -32),
				Element:  data.TextElement,
			},
			{
				Key:      "red_color_doodad",
				SprKey:   "red_square",
				Position: pixel.V(24, -48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "red_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Red",
				Position:    pixel.V(24, -48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "orange_color_doodad",
				SprKey:   "orange_square",
				Position: pixel.V(40, -48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "orange_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Orange",
				Position:    pixel.V(40, -48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "green_color_doodad",
				SprKey:   "green_square",
				Position: pixel.V(56, -48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "green_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Green",
				Position:    pixel.V(56, -48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "cyan_color_doodad",
				SprKey:   "cyan_square",
				Position: pixel.V(72, -48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "cyan_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Cyan",
				Position:    pixel.V(72, -48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "blue_color_doodad",
				SprKey:   "blue_square",
				Position: pixel.V(88, -48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "blue_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Blue",
				Position:    pixel.V(88, -48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "purple_color_doodad",
				SprKey:   "purple_square",
				Position: pixel.V(104, -48),
				Element:  data.SpriteElement,
			},
			{
				Key:         "purple_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Purple",
				Position:    pixel.V(104, -48),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "yellow_color_doodad",
				SprKey:   "yellow_square",
				Position: pixel.V(24, -64),
				Element:  data.SpriteElement,
			},
			{
				Key:         "yellow_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Yellow",
				Position:    pixel.V(24, -64),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "gold_color_doodad",
				SprKey:   "gold_square",
				Position: pixel.V(40, -64),
				Element:  data.SpriteElement,
			},
			{
				Key:         "gold_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Gold",
				Position:    pixel.V(40, -64),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "brown_color_doodad",
				SprKey:   "brown_square",
				Position: pixel.V(56, -64),
				Element:  data.SpriteElement,
			},
			{
				Key:         "brown_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Brown",
				Position:    pixel.V(56, -64),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "tan_color_doodad",
				SprKey:   "tan_square",
				Position: pixel.V(72, -64),
				Element:  data.SpriteElement,
			},
			{
				Key:         "tan_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Tan",
				Position:    pixel.V(72, -64),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "light_gray_color_doodad",
				SprKey:   "light_gray_square",
				Position: pixel.V(88, -64),
				Element:  data.SpriteElement,
			},
			{
				Key:         "light_gray_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Light Gray",
				Position:    pixel.V(88, -64),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "gray_color_doodad",
				SprKey:   "gray_square",
				Position: pixel.V(104, -64),
				Element:  data.SpriteElement,
			},
			{
				Key:         "gray_check_doodad",
				SprKey:      "checkbox_color_false",
				ClickSprKey: "checkbox_color_true",
				HelpText:    "Gray",
				Position:    pixel.V(104, -64),
				Element:     data.CheckboxElement,
			},
			{
				Key:         "cancel_change_world",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(116, -84),
				Element:     data.ButtonElement,
			},
			{
				Key:         "check_change_world",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(96, -84),
				Element:     data.ButtonElement,
			},
			{
				Key:      "world_list",
				HelpText: "The list of worlds.",
				Element:  data.ScrollElement,
				Position: pixel.V(-56, -8),
				Width:    8,
				Height:   10,
			},
		},
	}
	worldListEntry = data.ElementConstructor{
		Key:      "world_container_%d",
		HelpText: "Change to %s world.",
		Element:  data.ContainerElement,
		Width:    7,
		Height:   1,
	}
	turfTileItem = data.ElementConstructor{
		Key:      "turf_tile",
		Position: pixel.V(-48, 0),
		Element:  data.SpriteElement,
	}
	ladderTileItem = data.ElementConstructor{
		Key:      "ladder_tile",
		Position: pixel.V(-32, 0),
		Element:  data.SpriteElement,
	}
	doodadTileItem = data.ElementConstructor{
		Key:      "doodad_tile",
		Position: pixel.V(-16, 0),
		Element:  data.SpriteElement,
	}
	worldTxtItem = data.ElementConstructor{
		Key:      "world_text",
		Position: pixel.V(-4, 0),
		Element:  data.TextElement,
	}
	// Editor Panels
	editorPanelTopConstructor = &data.DialogConstructor{
		Key:    constants.DialogEditorPanelTop,
		Width:  17,
		Height: 1,
		Pos:    pixel.V(0, 400),
		Elements: []data.ElementConstructor{
			{
				Key:         "brush_btn",
				SprKey:      "brush_btn",
				ClickSprKey: "brush_btn_click",
				HelpText:    "Brush Tool (B)",
				Position:    pixel.V(-8*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "line_btn",
				SprKey:      "line_btn",
				ClickSprKey: "line_btn_click",
				HelpText:    "Line Tool (L)",
				Position:    pixel.V(-7*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "square_btn",
				SprKey:      "square_btn",
				ClickSprKey: "square_btn_click",
				HelpText:    "Square Tool (H)",
				Position:    pixel.V(-6*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fill_btn",
				SprKey:      "fill_btn",
				ClickSprKey: "fill_btn_click",
				HelpText:    "Fill Tool (G)",
				Position:    pixel.V(-5*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "erase_btn",
				SprKey:      "erase_btn",
				ClickSprKey: "erase_btn_click",
				HelpText:    "Erase Tool (E)",
				Position:    pixel.V(-4*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "eyedrop_btn",
				SprKey:      "eyedrop_btn",
				ClickSprKey: "eyedrop_btn_click",
				HelpText:    "Eyedrop Tool (Y)",
				Position:    pixel.V(-3*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wrench_btn",
				SprKey:      "wrench_btn",
				ClickSprKey: "wrench_btn_click",
				HelpText:    "Wrench Tool (P)",
				Position:    pixel.V(-2*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wire_btn",
				SprKey:      "wire_btn",
				ClickSprKey: "wire_btn_click",
				HelpText:    "Wire Tool (I)",
				Position:    pixel.V(-world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "select_btn",
				SprKey:      "select_btn",
				ClickSprKey: "select_btn_click",
				HelpText:    "Select Tool (M)",
				Position:    pixel.V(0, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "cut_btn",
				SprKey:      "cut_btn",
				ClickSprKey: "cut_btn_click",
				HelpText:    "Cut Selection (Ctrl+X)",
				Position:    pixel.V(world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "copy_btn",
				SprKey:      "copy_btn",
				ClickSprKey: "copy_btn_click",
				HelpText:    "Copy Selection (Ctrl+C)",
				Position:    pixel.V(2*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "paste_btn",
				SprKey:      "paste_btn",
				ClickSprKey: "paste_btn_click",
				HelpText:    "Paste Selection (Ctrl+V)",
				Position:    pixel.V(3*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fliph_btn",
				SprKey:      "fliph_btn",
				ClickSprKey: "fliph_btn_click",
				HelpText:    "Flip Selection Horizontal (U)",
				Position:    pixel.V(4*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "flipv_btn",
				SprKey:      "flipv_btn",
				ClickSprKey: "flipv_btn_click",
				HelpText:    "flipv Selection Vertical (K)",
				Position:    pixel.V(5*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "undo_btn",
				SprKey:      "undo_btn",
				ClickSprKey: "undo_btn_click",
				HelpText:    "Undo (Ctrl+Z)",
				Position:    pixel.V(6*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "redo_btn",
				SprKey:      "redo_btn",
				ClickSprKey: "redo_btn_click",
				HelpText:    "Redo (Ctrl+Shift+Z)",
				Position:    pixel.V(7*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:      "block_select",
				SprKey:   "editor_tile_bg",
				Position: pixel.V(8*world.TileSize, 0),
				Element:  data.SpriteElement,
			},
		},
	}
	editorPanelLeftConstructor = &data.DialogConstructor{
		Key:    constants.DialogEditorPanelLeft,
		Width:  2,
		Height: 10,
		Pos:    pixel.V(-692, 0),
		Elements: []data.ElementConstructor{
			{
				Key:         "brush_btn",
				SprKey:      "brush_btn",
				ClickSprKey: "brush_btn_click",
				HelpText:    "Brush Tool (B)",
				Position:    pixel.V(-0.5*world.TileSize, 2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "line_btn",
				SprKey:      "line_btn",
				ClickSprKey: "line_btn_click",
				HelpText:    "Line Tool (L)",
				Position:    pixel.V(0.5*world.TileSize, 2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "square_btn",
				SprKey:      "square_btn",
				ClickSprKey: "square_btn_click",
				HelpText:    "Square Tool (H)",
				Position:    pixel.V(-0.5*world.TileSize, 1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fill_btn",
				SprKey:      "fill_btn",
				ClickSprKey: "fill_btn_click",
				HelpText:    "Fill Tool (G)",
				Position:    pixel.V(0.5*world.TileSize, 1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "erase_btn",
				SprKey:      "erase_btn",
				ClickSprKey: "erase_btn_click",
				HelpText:    "Erase Tool (E)",
				Position:    pixel.V(-0.5*world.TileSize, 0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "eyedrop_btn",
				SprKey:      "eyedrop_btn",
				ClickSprKey: "eyedrop_btn_click",
				HelpText:    "Eyedrop Tool (Y)",
				Position:    pixel.V(0.5*world.TileSize, 0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wrench_btn",
				SprKey:      "wrench_btn",
				ClickSprKey: "wrench_btn_click",
				HelpText:    "Wrench Tool (P)",
				Position:    pixel.V(-0.5*world.TileSize, -0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wire_btn",
				SprKey:      "wire_btn",
				ClickSprKey: "wire_btn_click",
				HelpText:    "Wire Tool (I)",
				Position:    pixel.V(0.5*world.TileSize, -0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "select_btn",
				SprKey:      "select_btn",
				ClickSprKey: "select_btn_click",
				HelpText:    "Select Tool (M)",
				Position:    pixel.V(-0.5*world.TileSize, -1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "cut_btn",
				SprKey:      "cut_btn",
				ClickSprKey: "cut_btn_click",
				HelpText:    "Cut Selection (Ctrl+X)",
				Position:    pixel.V(0.5*world.TileSize, -1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "copy_btn",
				SprKey:      "copy_btn",
				ClickSprKey: "copy_btn_click",
				HelpText:    "Copy Selection (Ctrl+C)",
				Position:    pixel.V(-0.5*world.TileSize, -2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "paste_btn",
				SprKey:      "paste_btn",
				ClickSprKey: "paste_btn_click",
				HelpText:    "Paste Selection (Ctrl+V)",
				Position:    pixel.V(0.5*world.TileSize, -2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fliph_btn",
				SprKey:      "fliph_btn",
				ClickSprKey: "fliph_btn_click",
				HelpText:    "Flip Selection Horizontal (U)",
				Position:    pixel.V(-0.5*world.TileSize, -3.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "flipv_btn",
				SprKey:      "flipv_btn",
				ClickSprKey: "flipv_btn_click",
				HelpText:    "flipv Selection Vertical (K)",
				Position:    pixel.V(0.5*world.TileSize, -3.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "undo_btn",
				SprKey:      "undo_btn",
				ClickSprKey: "undo_btn_click",
				HelpText:    "Undo (Ctrl+Z)",
				Position:    pixel.V(-0.5*world.TileSize, -4.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "redo_btn",
				SprKey:      "redo_btn",
				ClickSprKey: "redo_btn_click",
				HelpText:    "Redo (Ctrl+Shift+Z)",
				Position:    pixel.V(0.5*world.TileSize, -4.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:      "block_select",
				SprKey:   "editor_tile_bg",
				Position: pixel.V(0, 4*world.TileSize),
				Element:  data.SpriteElement,
			},
		},
	}
	editorOptBottomConstructor = &data.DialogConstructor{
		Key:    constants.DialogEditorOptionsBot,
		Width:  9,
		Height: 1,
		Pos:    pixel.V(0, -400),
		Elements: []data.ElementConstructor{
			{
				Key:         "quit_btn",
				SprKey:      "quit_btn",
				ClickSprKey: "quit_btn_click",
				HelpText:    "Quit (Ctrl+Q)",
				Position:    pixel.V(-4*world.TileSize, 0),
			},
			{
				Key:         "new_btn",
				SprKey:      "new_btn",
				ClickSprKey: "new_btn_click",
				HelpText:    "New Puzzle Group (Ctrl+N)",
				Position:    pixel.V(-3*world.TileSize, 0),
			},
			{
				Key:         "save_btn",
				SprKey:      "save_btn",
				ClickSprKey: "save_btn_click",
				HelpText:    "Save Puzzle Group (Ctrl+S)",
				Position:    pixel.V(-2*world.TileSize, 0),
			},
			{
				Key:         "open_btn",
				SprKey:      "open_btn",
				ClickSprKey: "open_btn_click",
				HelpText:    "Open Puzzle Group (Ctrl+O)",
				Position:    pixel.V(-world.TileSize, 0),
			},
			{
				Key:         "prev_btn",
				SprKey:      "prev_btn",
				ClickSprKey: "prev_btn_click",
				HelpText:    "Previous Puzzle",
				Position:    pixel.V(0, 0),
			},
			{
				Key:         "next_btn",
				SprKey:      "next_btn",
				ClickSprKey: "next_btn_click",
				HelpText:    "Next Puzzle",
				Position:    pixel.V(1*world.TileSize, 0),
			},
			{
				Key:         "name_btn",
				SprKey:      "name_btn",
				ClickSprKey: "name_btn_click",
				HelpText:    "Change Name",
				Position:    pixel.V(2*world.TileSize, 0),
			},
			{
				Key:         "world_btn",
				SprKey:      "world_btn",
				ClickSprKey: "world_btn_click",
				HelpText:    "Change World (Tab)",
				Position:    pixel.V(3*world.TileSize, 0),
			},
			{
				Key:         "test_btn",
				SprKey:      "test_btn",
				ClickSprKey: "test_btn_click",
				HelpText:    "Test Puzzle",
				Position:    pixel.V(4*world.TileSize, 0),
			},
		},
	}
	editorOptRightConstructor = &data.DialogConstructor{
		Key:    constants.DialogEditorOptionsRight,
		Width:  2,
		Height: 10,
		Pos:    pixel.V(692, 0),
		Elements: []data.ElementConstructor{
			{
				Key:         "test_btn",
				SprKey:      "test_btn",
				ClickSprKey: "test_btn_click",
				HelpText:    "Test Puzzle",
				Position:    pixel.V(-world.HalfSize, 4.5*world.TileSize),
			},
			{
				Key:         "save_btn",
				SprKey:      "save_btn",
				ClickSprKey: "save_btn_click",
				HelpText:    "Save Puzzle Set (Ctrl+S)",
				Position:    pixel.V(-world.HalfSize, 3.5*world.TileSize),
			},
			{
				Key:         "open_btn",
				SprKey:      "open_btn",
				ClickSprKey: "open_btn_click",
				HelpText:    "Open Puzzle Set (Ctrl+O)",
				Position:    pixel.V(world.HalfSize, 3.5*world.TileSize),
			},
			{
				Key:         "new_btn",
				SprKey:      "new_btn",
				ClickSprKey: "new_btn_click",
				HelpText:    "New Puzzle Set (Ctrl+N)",
				Position:    pixel.V(-world.HalfSize, 2.5*world.TileSize),
			},
			{
				Key:         "add_btn",
				SprKey:      "add_btn",
				ClickSprKey: "add_btn_click",
				HelpText:    "New Puzzle in Set (Ctrl+A)",
				Position:    pixel.V(-world.HalfSize, 1.5*world.TileSize),
			},
			{
				Key:         "prev_btn",
				SprKey:      "prev_btn",
				ClickSprKey: "prev_btn_click",
				HelpText:    "Previous Puzzle (Left)",
				Position:    pixel.V(-world.HalfSize, world.HalfSize),
			},
			{
				Key:         "next_btn",
				SprKey:      "next_btn",
				ClickSprKey: "next_btn_click",
				HelpText:    "Next Puzzle (Right)",
				Position:    pixel.V(world.HalfSize, world.HalfSize),
			},
			{
				Key:         "delete_btn",
				SprKey:      "delete_btn",
				ClickSprKey: "delete_btn_click",
				HelpText:    "Delete Puzzle",
				Position:    pixel.V(-world.HalfSize, -world.HalfSize),
			},
			{
				Key:         "world_btn",
				SprKey:      "world_btn",
				ClickSprKey: "world_btn_click",
				HelpText:    "Change World (Tab)",
				Position:    pixel.V(world.HalfSize, -1.5*world.TileSize),
			},
			{
				Key:         "name_btn",
				SprKey:      "name_btn",
				ClickSprKey: "name_btn_click",
				HelpText:    "Change Name",
				Position:    pixel.V(world.HalfSize, -3.5*world.TileSize),
			},
			{
				Key:         "quit_btn",
				SprKey:      "quit_btn",
				ClickSprKey: "quit_btn_click",
				HelpText:    "Quit (Ctrl+Q)",
				Position:    pixel.V(-world.HalfSize, -4.5*world.TileSize),
			},
		},
	}
	// Wrench
	crackedTileOptionsConstructor = &data.DialogConstructor{
		Key:    constants.DialogCrackedTiles,
		Width:  8,
		Height: 6,
		Elements: []data.ElementConstructor{
			{
				Key:      "cracked_tile_title",
				Text:     "Cracked Tile",
				Position: pixel.V(-60, 40),
				Element:  data.TextElement,
			},
			{
				Key:         "cancel_cracked_tile",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(52, -36),
				Element:     data.ButtonElement,
			},
			{
				Key:         "check_cracked_tile",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(32, -36),
				Element:     data.ButtonElement,
			},
			{
				Key:      "cracked_tile_regenerate",
				Text:     "Regenerates",
				Position: pixel.V(-56, 22),
				Element:  data.TextElement,
			},
			{
				Key:         "cracked_tile_regenerate_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Whether the tile reforms after collapsing.",
				Position:    pixel.V(52, 22),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "cracked_tile_show",
				Text:     "Visible Cracks",
				Position: pixel.V(-56, 4),
				Element:  data.TextElement,
			},
			{
				Key:         "cracked_tile_show_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Show the cracks before a player steps on them.",
				Position:    pixel.V(52, 4),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "cracked_tile_enemy",
				Text:     "Enemy Can Crack",
				Position: pixel.V(-56, -14),
				Element:  data.TextElement,
			},
			{
				Key:         "cracked_tile_enemy_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Walking enemies can collapse this tile.",
				Position:    pixel.V(52, -14),
				Element:     data.CheckboxElement,
			},
		},
	}
	bombOptionsConstructor = &data.DialogConstructor{
		Key:    constants.DialogBomb,
		Width:  8,
		Height: 6,
		Elements: []data.ElementConstructor{
			{
				Key:      "bomb_options_title",
				Text:     "Bomb",
				Position: pixel.V(-60, 40),
				Element:  data.TextElement,
			},
			{
				Key:         "cancel_bomb_options",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(52, -36),
				Element:     data.ButtonElement,
			},
			{
				Key:         "confirm_bomb_options",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(32, -36),
				Element:     data.ButtonElement,
			},
			{
				Key:      "bomb_cross",
				Text:     "Cross Shape",
				Position: pixel.V(-56, 22),
				Element:  data.TextElement,
			},
			{
				Key:         "bomb_cross_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Whether the bomb explosion is cross-shaped.",
				Position:    pixel.V(52, 22),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "bomb_regenerate",
				Text:     "Regenerates",
				Position: pixel.V(-56, 4),
				Element:  data.TextElement,
			},
			{
				Key:         "bomb_regenerate_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Whether the bomb regenerates after exploding.",
				Position:    pixel.V(52, 4),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "bomb_regenerate_delay",
				Text:     "Regeneration\nDelay",
				Position: pixel.V(-56, -14),
				Element:  data.TextElement,
			},
			{
				Key:      "bomb_regenerate_delay_input",
				Text:     "0",
				HelpText: "The delay of the bomb's regeneration.",
				Position: pixel.V(40, -14),
				Element:  data.InputElement,
				Width:    1,
				Height:   1,
			},
			{
				Key:         "bomb_regenerate_delay_minus",
				SprKey:      "minus_btn",
				ClickSprKey: "minus_btn_click",
				Position:    pixel.V(26, -14),
				Element:     data.ButtonElement,
			},
			{
				Key:         "bomb_regenerate_delay_plus",
				SprKey:      "plus_btn",
				ClickSprKey: "plus_btn_click",
				Position:    pixel.V(54, -14),
				Element:     data.ButtonElement,
			},
		},
	}
}
