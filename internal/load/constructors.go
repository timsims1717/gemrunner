package load

import (
	"gemrunner/internal/data"
	"gemrunner/pkg/world"
	"github.com/gopxl/pixel"
)

var (
	openPuzzleConstructor         *data.DialogConstructor
	changeNameConstructor         *data.DialogConstructor
	noPlayersInPuzzle             *data.DialogConstructor
	editorPanelTopConstructor     *data.DialogConstructor
	editorPanelLeftConstructor    *data.DialogConstructor
	editorOptBottomConstructor    *data.DialogConstructor
	editorOptRightConstructor     *data.DialogConstructor
	crackedTileOptionsConstructor *data.DialogConstructor
)

func InitConstructors() {
	// Editor Options
	openPuzzleConstructor = &data.DialogConstructor{
		Key:    "open_puzzle",
		Width:  11,
		Height: 10,
		Elements: []data.ElementConstructor{
			{
				Key:      "open_title",
				Text:     "Open Puzzle Group",
				Position: pixel.V(-84, 72),
				Element:  data.TextElement,
			},
			{
				Key:         "cancel_open_puzzle",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(72, -64),
				Element:     data.ButtonElement,
			},
			{
				Key:         "open_puzzle",
				SprKey:      "open_btn_big",
				ClickSprKey: "open_btn_click_big",
				HelpText:    "Open",
				Position:    pixel.V(52, -64),
				Element:     data.ButtonElement,
			},
			{
				Key:      "puzzle_list",
				HelpText: "The list of puzzles.",
				Element:  data.ScrollElement,
				Position: pixel.V(0, 8),
				Width:    10,
				Height:   7,
			},
		},
	}
	changeNameConstructor = &data.DialogConstructor{
		Key:    "change_name",
		Width:  12,
		Height: 4,
		Elements: []data.ElementConstructor{
			{
				Key:      "change_name_title",
				Text:     "Puzzle Name",
				Position: pixel.V(-92, 24),
				Element:  data.TextElement,
			},
			{
				Key:         "cancel_puzzle_name",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(84, -20),
				Element:     data.ButtonElement,
			},
			{
				Key:         "check_puzzle_name",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(64, -20),
				Element:     data.ButtonElement,
			},
			{
				Key:      "puzzle_name",
				Text:     "Untitled",
				HelpText: "Enter the name of the puzzle here.",
				Element:  data.InputElement,
				Position: pixel.V(0, 4),
				Width:    11,
				Height:   1,
			},
		},
	}
	noPlayersInPuzzle = &data.DialogConstructor{
		Key:    "no_players",
		Width:  8,
		Height: 3,
		Elements: []data.ElementConstructor{
			{
				Key:      "no_players_msg",
				Text:     "You don't have any\nplayers in your\npuzzle.",
				Position: pixel.V(-56, 16),
				Element:  data.TextElement,
			},
			{
				Key:         "check_no_players",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(52, -12),
				Element:     data.ButtonElement,
			},
		},
	}
	// Editor Panels
	editorPanelTopConstructor = &data.DialogConstructor{
		Key:    "editor_panel_top",
		Width:  17,
		Height: 1,
		Pos:    pixel.V(0, 400),
		Elements: []data.ElementConstructor{
			{
				Key:         "brush_btn",
				SprKey:      "brush_btn",
				ClickSprKey: "brush_btn_click",
				HelpText:    "Brush Tool (B)",
				Position:    pixel.V(-8*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "line_btn",
				SprKey:      "line_btn",
				ClickSprKey: "line_btn_click",
				HelpText:    "Line Tool (L)",
				Position:    pixel.V(-7*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "square_btn",
				SprKey:      "square_btn",
				ClickSprKey: "square_btn_click",
				HelpText:    "Square Tool (H)",
				Position:    pixel.V(-6*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fill_btn",
				SprKey:      "fill_btn",
				ClickSprKey: "fill_btn_click",
				HelpText:    "Fill Tool (G)",
				Position:    pixel.V(-5*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "erase_btn",
				SprKey:      "erase_btn",
				ClickSprKey: "erase_btn_click",
				HelpText:    "Erase Tool (E)",
				Position:    pixel.V(-4*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "eyedrop_btn",
				SprKey:      "eyedrop_btn",
				ClickSprKey: "eyedrop_btn_click",
				HelpText:    "Eyedrop Tool (Y)",
				Position:    pixel.V(-3*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wrench_btn",
				SprKey:      "wrench_btn",
				ClickSprKey: "wrench_btn_click",
				HelpText:    "Wrench Tool (P)",
				Position:    pixel.V(-2*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wire_btn",
				SprKey:      "wire_btn",
				ClickSprKey: "wire_btn_click",
				HelpText:    "Wire Tool (I)",
				Position:    pixel.V(-world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "select_btn",
				SprKey:      "select_btn",
				ClickSprKey: "select_btn_click",
				HelpText:    "Select Tool (M)",
				Position:    pixel.V(0, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "cut_btn",
				SprKey:      "cut_btn",
				ClickSprKey: "cut_btn_click",
				HelpText:    "Cut Selection (Ctrl+X)",
				Position:    pixel.V(world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "copy_btn",
				SprKey:      "copy_btn",
				ClickSprKey: "copy_btn_click",
				HelpText:    "Copy Selection (Ctrl+C)",
				Position:    pixel.V(2*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "paste_btn",
				SprKey:      "paste_btn",
				ClickSprKey: "paste_btn_click",
				HelpText:    "Paste Selection (Ctrl+V)",
				Position:    pixel.V(3*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fliph_btn",
				SprKey:      "fliph_btn",
				ClickSprKey: "fliph_btn_click",
				HelpText:    "Flip Selection Horizontal (U)",
				Position:    pixel.V(4*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "flipv_btn",
				SprKey:      "flipv_btn",
				ClickSprKey: "flipv_btn_click",
				HelpText:    "flipv Selection Vertical (K)",
				Position:    pixel.V(5*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "undo_btn",
				SprKey:      "undo_btn",
				ClickSprKey: "undo_btn_click",
				HelpText:    "Undo (Ctrl+Z)",
				Position:    pixel.V(6*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:         "redo_btn",
				SprKey:      "redo_btn",
				ClickSprKey: "redo_btn_click",
				HelpText:    "Redo (Ctrl+Shift+Z)",
				Position:    pixel.V(7*world.TileSize, 0),
				Element:     data.ButtonElement,
			},
			{
				Key:      "block_select",
				SprKey:   "editor_tile_bg",
				Position: pixel.V(8*world.TileSize, 0),
				Element:  data.SpriteElement,
			},
		},
	}
	editorPanelLeftConstructor = &data.DialogConstructor{
		Key:    "editor_panel_left",
		Width:  2,
		Height: 10,
		Pos:    pixel.V(-692, 0),
		Elements: []data.ElementConstructor{
			{
				Key:         "brush_btn",
				SprKey:      "brush_btn",
				ClickSprKey: "brush_btn_click",
				HelpText:    "Brush Tool (B)",
				Position:    pixel.V(-0.5*world.TileSize, 2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "line_btn",
				SprKey:      "line_btn",
				ClickSprKey: "line_btn_click",
				HelpText:    "Line Tool (L)",
				Position:    pixel.V(0.5*world.TileSize, 2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "square_btn",
				SprKey:      "square_btn",
				ClickSprKey: "square_btn_click",
				HelpText:    "Square Tool (H)",
				Position:    pixel.V(-0.5*world.TileSize, 1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fill_btn",
				SprKey:      "fill_btn",
				ClickSprKey: "fill_btn_click",
				HelpText:    "Fill Tool (G)",
				Position:    pixel.V(0.5*world.TileSize, 1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "erase_btn",
				SprKey:      "erase_btn",
				ClickSprKey: "erase_btn_click",
				HelpText:    "Erase Tool (E)",
				Position:    pixel.V(-0.5*world.TileSize, 0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "eyedrop_btn",
				SprKey:      "eyedrop_btn",
				ClickSprKey: "eyedrop_btn_click",
				HelpText:    "Eyedrop Tool (Y)",
				Position:    pixel.V(0.5*world.TileSize, 0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wrench_btn",
				SprKey:      "wrench_btn",
				ClickSprKey: "wrench_btn_click",
				HelpText:    "Wrench Tool (P)",
				Position:    pixel.V(-0.5*world.TileSize, -0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "wire_btn",
				SprKey:      "wire_btn",
				ClickSprKey: "wire_btn_click",
				HelpText:    "Wire Tool (I)",
				Position:    pixel.V(0.5*world.TileSize, -0.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "select_btn",
				SprKey:      "select_btn",
				ClickSprKey: "select_btn_click",
				HelpText:    "Select Tool (M)",
				Position:    pixel.V(-0.5*world.TileSize, -1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "cut_btn",
				SprKey:      "cut_btn",
				ClickSprKey: "cut_btn_click",
				HelpText:    "Cut Selection (Ctrl+X)",
				Position:    pixel.V(0.5*world.TileSize, -1.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "copy_btn",
				SprKey:      "copy_btn",
				ClickSprKey: "copy_btn_click",
				HelpText:    "Copy Selection (Ctrl+C)",
				Position:    pixel.V(-0.5*world.TileSize, -2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "paste_btn",
				SprKey:      "paste_btn",
				ClickSprKey: "paste_btn_click",
				HelpText:    "Paste Selection (Ctrl+V)",
				Position:    pixel.V(0.5*world.TileSize, -2.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "fliph_btn",
				SprKey:      "fliph_btn",
				ClickSprKey: "fliph_btn_click",
				HelpText:    "Flip Selection Horizontal (U)",
				Position:    pixel.V(-0.5*world.TileSize, -3.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "flipv_btn",
				SprKey:      "flipv_btn",
				ClickSprKey: "flipv_btn_click",
				HelpText:    "flipv Selection Vertical (K)",
				Position:    pixel.V(0.5*world.TileSize, -3.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "undo_btn",
				SprKey:      "undo_btn",
				ClickSprKey: "undo_btn_click",
				HelpText:    "Undo (Ctrl+Z)",
				Position:    pixel.V(-0.5*world.TileSize, -4.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:         "redo_btn",
				SprKey:      "redo_btn",
				ClickSprKey: "redo_btn_click",
				HelpText:    "Redo (Ctrl+Shift+Z)",
				Position:    pixel.V(0.5*world.TileSize, -4.5*world.TileSize),
				Element:     data.ButtonElement,
			},
			{
				Key:      "block_select",
				SprKey:   "editor_tile_bg",
				Position: pixel.V(0, 4*world.TileSize),
				Element:  data.SpriteElement,
			},
		},
	}
	editorOptBottomConstructor = &data.DialogConstructor{
		Key:    "editor_options_bot",
		Width:  9,
		Height: 1,
		Pos:    pixel.V(0, -400),
		Elements: []data.ElementConstructor{
			{
				Key:         "quit_btn",
				SprKey:      "quit_btn",
				ClickSprKey: "quit_btn_click",
				HelpText:    "Quit (Ctrl+Q)",
				Position:    pixel.V(-4*world.TileSize, 0),
			},
			{
				Key:         "new_btn",
				SprKey:      "new_btn",
				ClickSprKey: "new_btn_click",
				HelpText:    "New Puzzle Group (Ctrl+N)",
				Position:    pixel.V(-3*world.TileSize, 0),
			},
			{
				Key:         "save_btn",
				SprKey:      "save_btn",
				ClickSprKey: "save_btn_click",
				HelpText:    "Save Puzzle Group (Ctrl+S)",
				Position:    pixel.V(-2*world.TileSize, 0),
			},
			{
				Key:         "open_btn",
				SprKey:      "open_btn",
				ClickSprKey: "open_btn_click",
				HelpText:    "Open Puzzle Group (Ctrl+O)",
				Position:    pixel.V(-world.TileSize, 0),
			},
			{
				Key:         "prev_btn",
				SprKey:      "prev_btn",
				ClickSprKey: "prev_btn_click",
				HelpText:    "Previous Puzzle",
				Position:    pixel.V(0, 0),
			},
			{
				Key:         "next_btn",
				SprKey:      "next_btn",
				ClickSprKey: "next_btn_click",
				HelpText:    "Next Puzzle",
				Position:    pixel.V(1*world.TileSize, 0),
			},
			{
				Key:         "name_btn",
				SprKey:      "name_btn",
				ClickSprKey: "name_btn_click",
				HelpText:    "Change Name",
				Position:    pixel.V(2*world.TileSize, 0),
			},
			{
				Key:         "world_btn",
				SprKey:      "world_btn",
				ClickSprKey: "world_btn_click",
				HelpText:    "Change World (Tab)",
				Position:    pixel.V(3*world.TileSize, 0),
			},
			{
				Key:         "test_btn",
				SprKey:      "test_btn",
				ClickSprKey: "test_btn_click",
				HelpText:    "Test Puzzle",
				Position:    pixel.V(4*world.TileSize, 0),
			},
		},
	}
	editorOptRightConstructor = &data.DialogConstructor{
		Key:    "editor_options_right",
		Width:  1,
		Height: 9,
		Pos:    pixel.V(670, 0),
		Elements: []data.ElementConstructor{
			{
				Key:         "quit_btn",
				SprKey:      "quit_btn",
				ClickSprKey: "quit_btn_click",
				HelpText:    "Quit (Ctrl+Q)",
				Position:    pixel.V(0, 4*world.TileSize),
			},
			{
				Key:         "new_btn",
				SprKey:      "new_btn",
				ClickSprKey: "new_btn_click",
				HelpText:    "New Puzzle Group (Ctrl+N)",
				Position:    pixel.V(0, 3*world.TileSize),
			},
			{
				Key:         "save_btn",
				SprKey:      "save_btn",
				ClickSprKey: "save_btn_click",
				HelpText:    "Save Puzzle Group (Ctrl+S)",
				Position:    pixel.V(0, 2*world.TileSize),
			},
			{
				Key:         "open_btn",
				SprKey:      "open_btn",
				ClickSprKey: "open_btn_click",
				HelpText:    "Open Puzzle Group (Ctrl+O)",
				Position:    pixel.V(0, world.TileSize),
			},
			{
				Key:         "prev_btn",
				SprKey:      "prev_btn",
				ClickSprKey: "prev_btn_click",
				HelpText:    "Previous Puzzle",
				Position:    pixel.V(0, 0),
			},
			{
				Key:         "next_btn",
				SprKey:      "next_btn",
				ClickSprKey: "next_btn_click",
				HelpText:    "Next Puzzle",
				Position:    pixel.V(0, -world.TileSize),
			},
			{
				Key:         "name_btn",
				SprKey:      "name_btn",
				ClickSprKey: "name_btn_click",
				HelpText:    "Change Name",
				Position:    pixel.V(0, -2*world.TileSize),
			},
			{
				Key:         "world_btn",
				SprKey:      "world_btn",
				ClickSprKey: "world_btn_click",
				HelpText:    "Change World (Tab)",
				Position:    pixel.V(0, -3*world.TileSize),
			},
			{
				Key:         "test_btn",
				SprKey:      "test_btn",
				ClickSprKey: "test_btn_click",
				HelpText:    "Test Puzzle",
				Position:    pixel.V(0, -4*world.TileSize),
			},
		},
	}
	// Wrench
	crackedTileOptionsConstructor = &data.DialogConstructor{
		Key:    "cracked_tile_options",
		Width:  8,
		Height: 6,
		Elements: []data.ElementConstructor{
			{
				Key:      "cracked_tile_title",
				Text:     "Cracked Tile",
				Position: pixel.V(-60, 40),
				Element:  data.TextElement,
			},
			{
				Key:         "cancel_cracked_tile",
				SprKey:      "cancel_btn_big",
				ClickSprKey: "cancel_btn_click_big",
				HelpText:    "Cancel",
				Position:    pixel.V(52, -36),
				Element:     data.ButtonElement,
			},
			{
				Key:         "check_cracked_tile",
				SprKey:      "check_btn_big",
				ClickSprKey: "check_btn_click_big",
				HelpText:    "Confirm",
				Position:    pixel.V(32, -36),
				Element:     data.ButtonElement,
			},
			{
				Key:      "cracked_tile_regenerate",
				Text:     "Regenerates",
				Position: pixel.V(-56, 22),
				Element:  data.TextElement,
			},
			{
				Key:         "cracked_tile_regenerate_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Whether the tile reforms after collapsing.",
				Position:    pixel.V(52, 22),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "cracked_tile_show",
				Text:     "Visible Cracks",
				Position: pixel.V(-56, 4),
				Element:  data.TextElement,
			},
			{
				Key:         "cracked_tile_show_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Show the cracks before a player steps on them.",
				Position:    pixel.V(52, 4),
				Element:     data.CheckboxElement,
			},
			{
				Key:      "cracked_tile_enemy",
				Text:     "Enemy Can Crack",
				Position: pixel.V(-56, -14),
				Element:  data.TextElement,
			},
			{
				Key:         "cracked_tile_enemy_check",
				SprKey:      "checkbox_false",
				ClickSprKey: "checkbox_true",
				HelpText:    "Walking enemies can collapse this tile.",
				Position:    pixel.V(52, -14),
				Element:     data.CheckboxElement,
			},
		},
	}
}
