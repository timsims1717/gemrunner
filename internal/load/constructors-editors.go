package load

import (
	"gemrunner/internal/constants"
	"gemrunner/internal/ui"
	"gemrunner/pkg/world"
	"github.com/gopxl/pixel"
)

var (
	// editor panels
	EditorPanelTopConstructor  *ui.DialogConstructor
	EditorPanelLeftConstructor *ui.DialogConstructor
	EditorOptBottomConstructor *ui.DialogConstructor
	EditorOptRightConstructor  *ui.DialogConstructor
	// editor options dialogs
	OpenPuzzleConstructor          *ui.DialogConstructor
	ChangeNameConstructor          *ui.DialogConstructor
	NoPlayersInPuzzleConstructor   *ui.DialogConstructor
	AreYouSureDeleteConstructor    *ui.DialogConstructor
	UnableToSaveConstructor        *ui.DialogConstructor
	UnableToSaveConfirmConstructor *ui.DialogConstructor
	WorldDialogConstructor         *ui.DialogConstructor
	WorldListEntry                 ui.ElementConstructor
	TurfTileItem                   ui.ElementConstructor
	LadderTileItem                 ui.ElementConstructor
	DoodadTileItem                 ui.ElementConstructor
	WorldTxtItem                   ui.ElementConstructor
	// editor mode dialogs
	CrackedTileOptionsConstructor *ui.DialogConstructor
	BombOptionsConstructor        *ui.DialogConstructor
	JetpackOptionsConstructor     *ui.DialogConstructor
)

func InitEditorConstructors() {
	// Editor Options
	OpenPuzzleConstructor = &ui.DialogConstructor{
		Key:    constants.DialogOpenPuzzle,
		Width:  11,
		Height: 10,
		Elements: []ui.ElementConstructor{
			{
				Key:         "open_title",
				Text:        "Open Puzzle Group",
				Position:    pixel.V(-84, 72),
				Color:       pixel.ToRGBA(constants.ColorWhite),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cancel_open_puzzle",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(72, -64),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "open_puzzle",
				SprKey:      "open_btn_big",
				SprKey2:     "open_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Open",
				Position:    pixel.V(52, -64),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "puzzle_list",
				HelpText:    "The list of puzzles.",
				Batch:       constants.UIBatch,
				ElementType: ui.ScrollElement,
				Position:    pixel.V(0, 8),
				Width:       10 * world.TileSize,
				Height:      7 * world.TileSize,
			},
		},
	}
	ChangeNameConstructor = &ui.DialogConstructor{
		Key:    constants.DialogChangeName,
		Width:  12,
		Height: 4,
		Elements: []ui.ElementConstructor{
			{
				Key:         "change_name_title",
				Text:        "Puzzle Set Name",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-92, 24),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cancel_puzzle_name",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(84, -20),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "check_puzzle_name",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(64, -20),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "puzzle_name",
				Text:        "Untitled",
				SprKey:      constants.TextCaret,
				Color:       pixel.ToRGBA(constants.ColorWhite),
				HelpText:    "Enter the name of the puzzle here.",
				Batch:       constants.UIBatch,
				ElementType: ui.InputElement,
				Position:    pixel.V(0, 4),
				Width:       11 * world.TileSize,
				Height:      1 * world.TileSize,
			},
		},
	}
	NoPlayersInPuzzleConstructor = &ui.DialogConstructor{
		Key:    constants.DialogNoPlayersInPuzzle,
		Width:  8,
		Height: 3,
		Elements: []ui.ElementConstructor{
			{
				Key:         "no_players_msg",
				Text:        "You don't have any\nplayers in your\npuzzle.",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 16),
				ElementType: ui.TextElement,
			},
			{
				Key:         "check_no_players",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(52, -12),
				ElementType: ui.ButtonElement,
			},
		},
	}
	AreYouSureDeleteConstructor = &ui.DialogConstructor{
		Key:    constants.DialogAreYouSureDelete,
		Width:  8,
		Height: 3,
		Elements: []ui.ElementConstructor{
			{
				Key:         "are_you_sure_msg",
				Text:        "Are you sure?\nThis can't be undone.",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 16),
				ElementType: ui.TextElement,
			},
			{
				Key:         "confirm_delete",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(32, -12),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "cancel_delete",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(52, -12),
				ElementType: ui.ButtonElement,
			},
		},
	}
	UnableToSaveConstructor = &ui.DialogConstructor{
		Key:    constants.DialogUnableToSave,
		Width:  8,
		Height: 3,
		Elements: []ui.ElementConstructor{
			{
				Key:         "unable_to_save_msg",
				Text:        "There was an error\nwhen trying to save\nyour puzzle.",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 16),
				ElementType: ui.TextElement,
			},
			{
				Key:         "confirm_unable_to_save",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(52, -12),
				ElementType: ui.ButtonElement,
			},
		},
	}
	UnableToSaveConfirmConstructor = &ui.DialogConstructor{
		Key:    constants.DialogUnableToSaveConfirm,
		Width:  8,
		Height: 4,
		Elements: []ui.ElementConstructor{
			{
				Key:         "unable_to_save_msg",
				Text:        "There was an error\nwhen trying to save\nyour puzzle.\nDo you want to do\nthat anyway?",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 24),
				ElementType: ui.TextElement,
			},
			{
				Key:         "confirm_unable_to_save",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(32, -20),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "cancel_unable_to_save",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(52, -20),
				ElementType: ui.ButtonElement,
			},
		},
	}
	WorldDialogConstructor = &ui.DialogConstructor{
		Key:    constants.DialogChangeWorld,
		Width:  17,
		Height: 12,
		Elements: []ui.ElementConstructor{
			{
				Key:         "change_world_title",
				Text:        "Change World",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-132, 88),
				ElementType: ui.TextElement,
			},
			{
				Key:         "world_container_selected",
				HelpText:    "Current World",
				ElementType: ui.ContainerElement,
				Position:    pixel.V(-64, 72),
				Width:       8 * world.TileSize,
				Height:      1 * world.TileSize,
			},
			{
				Key:         "custom_text",
				Text:        "Custom Colors",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(8, 80),
				ElementType: ui.TextElement,
			},
			{
				Key:         "custom_world_check",
				SprKey:      "checkbox_false",
				SprKey2:     "checkbox_true",
				Batch:       constants.UIBatch,
				HelpText:    "Customize this puzzle's colors.",
				Position:    pixel.V(120, 80),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "primary_text",
				Text:        "Primary Color",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(16, 64),
				ElementType: ui.TextElement,
			},
			{
				Key:         "red_color_primary",
				SprKey:      "red_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(24, 48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "red_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Red",
				Position:    pixel.V(24, 48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "orange_color_primary",
				SprKey:      "orange_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(40, 48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "orange_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Orange",
				Position:    pixel.V(40, 48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "green_color_primary",
				SprKey:      "green_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(56, 48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "green_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Green",
				Position:    pixel.V(56, 48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "cyan_color_primary",
				SprKey:      "cyan_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(72, 48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "cyan_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Cyan",
				Position:    pixel.V(72, 48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "blue_color_primary",
				SprKey:      "blue_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(88, 48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "blue_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Blue",
				Position:    pixel.V(88, 48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "purple_color_primary",
				SprKey:      "purple_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(104, 48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "purple_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Purple",
				Position:    pixel.V(104, 48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "pink_color_primary",
				SprKey:      "pink_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(120, 48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "pink_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Pink",
				Position:    pixel.V(120, 48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "yellow_color_primary",
				SprKey:      "yellow_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(24, 32),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "yellow_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Yellow",
				Position:    pixel.V(24, 32),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "gold_color_primary",
				SprKey:      "gold_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(40, 32),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "gold_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Gold",
				Position:    pixel.V(40, 32),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "brown_color_primary",
				SprKey:      "brown_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(56, 32),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "brown_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Brown",
				Position:    pixel.V(56, 32),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "tan_color_primary",
				SprKey:      "tan_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(72, 32),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "tan_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Tan",
				Position:    pixel.V(72, 32),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "light_gray_color_primary",
				SprKey:      "light_gray_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(88, 32),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "light_gray_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Light Gray",
				Position:    pixel.V(88, 32),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "gray_color_primary",
				SprKey:      "gray_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(104, 32),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "gray_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Gray",
				Position:    pixel.V(104, 32),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "burnt_color_primary",
				SprKey:      "burnt_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(120, 32),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "burnt_check_primary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Burnt",
				Position:    pixel.V(120, 32),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "secondary_text",
				Text:        "Secondary Color",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(16, 16),
				ElementType: ui.TextElement,
			},
			{
				Key:         "red_color_secondary",
				SprKey:      "red_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(24, 0),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "red_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Red",
				Position:    pixel.V(24, 0),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "orange_color_secondary",
				SprKey:      "orange_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(40, 0),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "orange_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Orange",
				Position:    pixel.V(40, 0),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "green_color_secondary",
				SprKey:      "green_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(56, 0),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "green_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Green",
				Position:    pixel.V(56, 0),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "cyan_color_secondary",
				SprKey:      "cyan_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(72, 0),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "cyan_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Cyan",
				Position:    pixel.V(72, 0),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "blue_color_secondary",
				SprKey:      "blue_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(88, 0),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "blue_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Blue",
				Position:    pixel.V(88, 0),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "purple_color_secondary",
				SprKey:      "purple_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(104, 0),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "purple_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Purple",
				Position:    pixel.V(104, 0),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "pink_color_secondary",
				SprKey:      "pink_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(120, 0),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "pink_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Pink",
				Position:    pixel.V(120, 0),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "yellow_color_secondary",
				SprKey:      "yellow_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(24, -16),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "yellow_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Yellow",
				Position:    pixel.V(24, -16),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "gold_color_secondary",
				SprKey:      "gold_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(40, -16),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "gold_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Gold",
				Position:    pixel.V(40, -16),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "brown_color_secondary",
				SprKey:      "brown_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(56, -16),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "brown_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Brown",
				Position:    pixel.V(56, -16),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "tan_color_secondary",
				SprKey:      "tan_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(72, -16),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "tan_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Tan",
				Position:    pixel.V(72, -16),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "light_gray_color_secondary",
				SprKey:      "light_gray_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(88, -16),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "light_gray_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Light Gray",
				Position:    pixel.V(88, -16),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "gray_color_secondary",
				SprKey:      "gray_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(104, -16),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "gray_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Gray",
				Position:    pixel.V(104, -16),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "burnt_color_secondary",
				SprKey:      "burnt_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(120, -16),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "burnt_check_secondary",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Burnt",
				Position:    pixel.V(120, -16),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "doodad_text",
				Text:        "Doodad Color",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(16, -32),
				ElementType: ui.TextElement,
			},
			{
				Key:         "red_color_doodad",
				SprKey:      "red_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(24, -48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "red_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Red",
				Position:    pixel.V(24, -48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "orange_color_doodad",
				SprKey:      "orange_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(40, -48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "orange_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Orange",
				Position:    pixel.V(40, -48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "green_color_doodad",
				SprKey:      "green_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(56, -48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "green_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Green",
				Position:    pixel.V(56, -48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "cyan_color_doodad",
				SprKey:      "cyan_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(72, -48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "cyan_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Cyan",
				Position:    pixel.V(72, -48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "blue_color_doodad",
				SprKey:      "blue_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(88, -48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "blue_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Blue",
				Position:    pixel.V(88, -48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "purple_color_doodad",
				SprKey:      "purple_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(104, -48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "purple_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Purple",
				Position:    pixel.V(104, -48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "pink_color_doodad",
				SprKey:      "pink_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(120, -48),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "pink_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Pink",
				Position:    pixel.V(120, -48),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "yellow_color_doodad",
				SprKey:      "yellow_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(24, -64),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "yellow_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Yellow",
				Position:    pixel.V(24, -64),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "gold_color_doodad",
				SprKey:      "gold_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(40, -64),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "gold_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Gold",
				Position:    pixel.V(40, -64),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "brown_color_doodad",
				SprKey:      "brown_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(56, -64),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "brown_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Brown",
				Position:    pixel.V(56, -64),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "tan_color_doodad",
				SprKey:      "tan_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(72, -64),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "tan_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Tan",
				Position:    pixel.V(72, -64),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "light_gray_color_doodad",
				SprKey:      "light_gray_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(88, -64),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "light_gray_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Light Gray",
				Position:    pixel.V(88, -64),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "gray_color_doodad",
				SprKey:      "gray_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(104, -64),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "gray_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Gray",
				Position:    pixel.V(104, -64),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "burnt_color_doodad",
				SprKey:      "burnt_square",
				Batch:       constants.UIBatch,
				Position:    pixel.V(120, -64),
				ElementType: ui.SpriteElement,
			},
			{
				Key:         "burnt_check_doodad",
				SprKey:      "checkbox_color_false",
				SprKey2:     "checkbox_color_true",
				Batch:       constants.UIBatch,
				HelpText:    "Burnt",
				Position:    pixel.V(120, -64),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "cancel_change_world",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(124, -84),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "check_change_world",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(104, -84),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "world_list",
				HelpText:    "The list of worlds.",
				Batch:       constants.UIBatch,
				ElementType: ui.ScrollElement,
				Position:    pixel.V(-64, -16),
				Width:       8 * world.TileSize,
				Height:      9 * world.TileSize,
			},
		},
	}
	WorldListEntry = ui.ElementConstructor{
		Key:         "world_container_%d",
		HelpText:    "Change to %s world.",
		ElementType: ui.ContainerElement,
		Width:       7 * world.TileSize,
		Height:      1 * world.TileSize,
	}
	TurfTileItem = ui.ElementConstructor{
		Key:         "turf_tile",
		Position:    pixel.V(-48, 0),
		Batch:       constants.TileBatch,
		ElementType: ui.SpriteElement,
	}
	LadderTileItem = ui.ElementConstructor{
		Key:         "ladder_tile",
		Position:    pixel.V(-32, 0),
		Batch:       constants.TileBatch,
		ElementType: ui.SpriteElement,
	}
	DoodadTileItem = ui.ElementConstructor{
		Key:         "doodad_tile",
		Position:    pixel.V(-16, 0),
		Batch:       constants.TileBatch,
		ElementType: ui.SpriteElement,
	}
	WorldTxtItem = ui.ElementConstructor{
		Key:         "world_text",
		Position:    pixel.V(-4, 0),
		Color:       pixel.ToRGBA(constants.ColorWhite),
		ElementType: ui.TextElement,
	}
	// Editor Panels
	EditorPanelTopConstructor = &ui.DialogConstructor{
		Key:    constants.DialogEditorPanelTop,
		Width:  17,
		Height: 1,
		Pos:    pixel.V(0, 400),
		Elements: []ui.ElementConstructor{
			{
				Key:         "brush_btn",
				SprKey:      "brush_btn",
				SprKey2:     "brush_btn_click",
				HelpText:    "Brush Tool (B)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-8*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "line_btn",
				SprKey:      "line_btn",
				SprKey2:     "line_btn_click",
				HelpText:    "Line Tool (L)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-7*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "square_btn",
				SprKey:      "square_btn",
				SprKey2:     "square_btn_click",
				HelpText:    "Square Tool (H)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-6*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "fill_btn",
				SprKey:      "fill_btn",
				SprKey2:     "fill_btn_click",
				HelpText:    "Fill Tool (G)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-5*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "erase_btn",
				SprKey:      "erase_btn",
				SprKey2:     "erase_btn_click",
				HelpText:    "Erase Tool (E)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-4*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "eyedrop_btn",
				SprKey:      "eyedrop_btn",
				SprKey2:     "eyedrop_btn_click",
				HelpText:    "Eyedrop Tool (Y)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-3*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "wrench_btn",
				SprKey:      "wrench_btn",
				SprKey2:     "wrench_btn_click",
				HelpText:    "Wrench Tool (P)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-2*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "wire_btn",
				SprKey:      "wire_btn",
				SprKey2:     "wire_btn_click",
				HelpText:    "Wire Tool (I)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(-world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "select_btn",
				SprKey:      "select_btn",
				SprKey2:     "select_btn_click",
				HelpText:    "Select Tool (M)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(0, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "cut_btn",
				SprKey:      "cut_btn",
				SprKey2:     "cut_btn_click",
				HelpText:    "Cut Selection (Ctrl+X)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "copy_btn",
				SprKey:      "copy_btn",
				SprKey2:     "copy_btn_click",
				HelpText:    "Copy Selection (Ctrl+C)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(2*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "paste_btn",
				SprKey:      "paste_btn",
				SprKey2:     "paste_btn_click",
				HelpText:    "Paste Selection (Ctrl+V)",
				Batch:       constants.UIBatch,
				Position:    pixel.V(3*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "fliph_btn",
				SprKey:      "fliph_btn",
				SprKey2:     "fliph_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Flip Selection Horizontal (U)",
				Position:    pixel.V(4*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "flipv_btn",
				SprKey:      "flipv_btn",
				SprKey2:     "flipv_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "flipv Selection Vertical (K)",
				Position:    pixel.V(5*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "undo_btn",
				SprKey:      "undo_btn",
				SprKey2:     "undo_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Undo (Ctrl+Z)",
				Position:    pixel.V(6*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "redo_btn",
				SprKey:      "redo_btn",
				SprKey2:     "redo_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Redo (Ctrl+Shift+Z)",
				Position:    pixel.V(7*world.TileSize, 0),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "block_select",
				SprKey:      "editor_tile_bg",
				Batch:       constants.UIBatch,
				Position:    pixel.V(8*world.TileSize, 0),
				ElementType: ui.SpriteElement,
			},
		},
	}
	EditorPanelLeftConstructor = &ui.DialogConstructor{
		Key:    constants.DialogEditorPanelLeft,
		Width:  2,
		Height: 10,
		Pos:    pixel.V(-747, 0),
		Elements: []ui.ElementConstructor{
			{
				Key:         "brush_btn",
				SprKey:      "brush_btn",
				SprKey2:     "brush_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Brush Tool (B)",
				Position:    pixel.V(-0.5*world.TileSize, 2.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "line_btn",
				SprKey:      "line_btn",
				SprKey2:     "line_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Line Tool (L)",
				Position:    pixel.V(0.5*world.TileSize, 2.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "square_btn",
				SprKey:      "square_btn",
				SprKey2:     "square_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Square Tool (H)",
				Position:    pixel.V(-0.5*world.TileSize, 1.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "fill_btn",
				SprKey:      "fill_btn",
				SprKey2:     "fill_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Fill Tool (G)",
				Position:    pixel.V(0.5*world.TileSize, 1.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "erase_btn",
				SprKey:      "erase_btn",
				SprKey2:     "erase_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Erase Tool (E)",
				Position:    pixel.V(-0.5*world.TileSize, 0.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "eyedrop_btn",
				SprKey:      "eyedrop_btn",
				SprKey2:     "eyedrop_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Eyedrop Tool (Y)",
				Position:    pixel.V(0.5*world.TileSize, 0.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "wrench_btn",
				SprKey:      "wrench_btn",
				SprKey2:     "wrench_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Wrench Tool (P)",
				Position:    pixel.V(-0.5*world.TileSize, -0.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "wire_btn",
				SprKey:      "wire_btn",
				SprKey2:     "wire_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Wire Tool (I)",
				Position:    pixel.V(0.5*world.TileSize, -0.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "select_btn",
				SprKey:      "select_btn",
				SprKey2:     "select_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Select Tool (M)",
				Position:    pixel.V(-0.5*world.TileSize, -1.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "cut_btn",
				SprKey:      "cut_btn",
				SprKey2:     "cut_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Cut Selection (Ctrl+X)",
				Position:    pixel.V(0.5*world.TileSize, -1.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "copy_btn",
				SprKey:      "copy_btn",
				SprKey2:     "copy_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Copy Selection (Ctrl+C)",
				Position:    pixel.V(-0.5*world.TileSize, -2.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "paste_btn",
				SprKey:      "paste_btn",
				SprKey2:     "paste_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Paste Selection (Ctrl+V)",
				Position:    pixel.V(0.5*world.TileSize, -2.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "fliph_btn",
				SprKey:      "fliph_btn",
				SprKey2:     "fliph_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Flip Selection Horizontal (U)",
				Position:    pixel.V(-0.5*world.TileSize, -3.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "flipv_btn",
				SprKey:      "flipv_btn",
				SprKey2:     "flipv_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "flipv Selection Vertical (K)",
				Position:    pixel.V(0.5*world.TileSize, -3.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "undo_btn",
				SprKey:      "undo_btn",
				SprKey2:     "undo_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Undo (Ctrl+Z)",
				Position:    pixel.V(-0.5*world.TileSize, -4.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "redo_btn",
				SprKey:      "redo_btn",
				SprKey2:     "redo_btn_click",
				Batch:       constants.UIBatch,
				HelpText:    "Redo (Ctrl+Shift+Z)",
				Position:    pixel.V(0.5*world.TileSize, -4.5*world.TileSize),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "block_select",
				SprKey:      "editor_tile_bg",
				Batch:       constants.UIBatch,
				Position:    pixel.V(0, 4*world.TileSize),
				ElementType: ui.SpriteElement,
			},
		},
	}
	EditorOptBottomConstructor = &ui.DialogConstructor{
		Key:    constants.DialogEditorOptionsBot,
		Width:  9,
		Height: 1,
		Pos:    pixel.V(0, -400),
		Elements: []ui.ElementConstructor{
			{
				Key:      "exit_editor_btn",
				SprKey:   "quit_btn",
				SprKey2:  "quit_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Quit (Ctrl+Q)",
				Position: pixel.V(-4*world.TileSize, 0),
			},
			{
				Key:      "new_btn",
				SprKey:   "new_btn",
				SprKey2:  "new_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "New Puzzle Group (Ctrl+N)",
				Position: pixel.V(-3*world.TileSize, 0),
			},
			{
				Key:      "save_btn",
				SprKey:   "save_btn",
				SprKey2:  "save_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Save Puzzle Group (Ctrl+S)",
				Position: pixel.V(-2*world.TileSize, 0),
			},
			{
				Key:      "open_btn",
				SprKey:   "open_btn",
				SprKey2:  "open_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Open Puzzle Group (Ctrl+O)",
				Position: pixel.V(-world.TileSize, 0),
			},
			{
				Key:      "prev_btn",
				SprKey:   "prev_btn",
				SprKey2:  "prev_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Previous Puzzle",
				Position: pixel.V(0, 0),
			},
			{
				Key:      "next_btn",
				SprKey:   "next_btn",
				SprKey2:  "next_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Next Puzzle",
				Position: pixel.V(1*world.TileSize, 0),
			},
			{
				Key:      "name_btn",
				SprKey:   "name_btn",
				SprKey2:  "name_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Change Name",
				Position: pixel.V(2*world.TileSize, 0),
			},
			{
				Key:      "world_btn",
				SprKey:   "world_btn",
				SprKey2:  "world_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Change World (Tab)",
				Position: pixel.V(3*world.TileSize, 0),
			},
			{
				Key:      "test_btn",
				SprKey:   "test_btn",
				SprKey2:  "test_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Test Puzzle",
				Position: pixel.V(4*world.TileSize, 0),
			},
		},
	}
	EditorOptRightConstructor = &ui.DialogConstructor{
		Key:    constants.DialogEditorOptionsRight,
		Width:  2,
		Height: 10,
		Pos:    pixel.V(747, 0),
		Elements: []ui.ElementConstructor{
			{
				Key:      "test_btn",
				SprKey:   "test_btn",
				SprKey2:  "test_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Test Puzzle",
				Position: pixel.V(-world.HalfSize, 4.5*world.TileSize),
			},
			{
				Key:      "save_btn",
				SprKey:   "save_btn",
				SprKey2:  "save_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Save Puzzle Set (Ctrl+S)",
				Position: pixel.V(-world.HalfSize, 3.5*world.TileSize),
			},
			{
				Key:      "open_btn",
				SprKey:   "open_btn",
				SprKey2:  "open_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Open Puzzle Set (Ctrl+O)",
				Position: pixel.V(world.HalfSize, 3.5*world.TileSize),
			},
			{
				Key:      "new_btn",
				SprKey:   "new_btn",
				SprKey2:  "new_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "New Puzzle Set (Ctrl+N)",
				Position: pixel.V(-world.HalfSize, 2.5*world.TileSize),
			},
			{
				Key:      "add_btn",
				SprKey:   "add_btn",
				SprKey2:  "add_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "New Puzzle in Set (Ctrl+A)",
				Position: pixel.V(-world.HalfSize, 1.5*world.TileSize),
			},
			{
				Key:      "prev_btn",
				SprKey:   "prev_btn",
				SprKey2:  "prev_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Previous Puzzle (Left)",
				Position: pixel.V(-world.HalfSize, world.HalfSize),
			},
			{
				Key:      "next_btn",
				SprKey:   "next_btn",
				SprKey2:  "next_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Next Puzzle (Right)",
				Position: pixel.V(world.HalfSize, world.HalfSize),
			},
			{
				Key:      "delete_btn",
				SprKey:   "delete_btn",
				SprKey2:  "delete_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Delete Puzzle",
				Position: pixel.V(-world.HalfSize, -world.HalfSize),
			},
			{
				Key:      "world_btn",
				SprKey:   "world_btn",
				SprKey2:  "world_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Change World (Tab)",
				Position: pixel.V(world.HalfSize, -1.5*world.TileSize),
			},
			{
				Key:      "name_btn",
				SprKey:   "name_btn",
				SprKey2:  "name_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Change Name",
				Position: pixel.V(world.HalfSize, -3.5*world.TileSize),
			},
			{
				Key:      "exit_editor_btn",
				SprKey:   "quit_btn",
				SprKey2:  "quit_btn_click",
				Batch:    constants.UIBatch,
				HelpText: "Quit (Ctrl+Q)",
				Position: pixel.V(-world.HalfSize, -4.5*world.TileSize),
			},
		},
	}
	// Wrench
	CrackedTileOptionsConstructor = &ui.DialogConstructor{
		Key:    constants.DialogCrackedTiles,
		Width:  8,
		Height: 6,
		Elements: []ui.ElementConstructor{
			{
				Key:         "cracked_tile_title",
				Text:        "Cracked Tile",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-60, 40),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cancel_cracked_tile",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(52, -36),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "check_cracked_tile",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(32, -36),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "cracked_tile_regenerate",
				Text:        "Regenerates",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 22),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cracked_tile_regenerate_check",
				SprKey:      "checkbox_false",
				SprKey2:     "checkbox_true",
				Batch:       constants.UIBatch,
				HelpText:    "Whether the tile reforms after collapsing.",
				Position:    pixel.V(52, 22),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "cracked_tile_show",
				Text:        "Visible Cracks",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 4),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cracked_tile_show_check",
				SprKey:      "checkbox_false",
				SprKey2:     "checkbox_true",
				Batch:       constants.UIBatch,
				HelpText:    "Show the cracks before a player steps on them.",
				Position:    pixel.V(52, 4),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "cracked_tile_enemy",
				Text:        "Enemy Can Crack",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, -14),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cracked_tile_enemy_check",
				SprKey:      "checkbox_false",
				SprKey2:     "checkbox_true",
				Batch:       constants.UIBatch,
				HelpText:    "Walking enemies can collapse this tile.",
				Position:    pixel.V(52, -14),
				ElementType: ui.CheckboxElement,
			},
		},
	}
	BombOptionsConstructor = &ui.DialogConstructor{
		Key:    constants.DialogBomb,
		Width:  8,
		Height: 6,
		Elements: []ui.ElementConstructor{
			{
				Key:         "bomb_options_title",
				Text:        "Bomb",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-60, 40),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cancel_bomb_options",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(52, -36),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "confirm_bomb_options",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(32, -36),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "bomb_cross",
				Text:        "Cross Shape",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 22),
				ElementType: ui.TextElement,
			},
			{
				Key:         "bomb_cross_check",
				SprKey:      "checkbox_false",
				SprKey2:     "checkbox_true",
				Batch:       constants.UIBatch,
				HelpText:    "Whether the bomb explosion is cross-shaped.",
				Position:    pixel.V(52, 22),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "bomb_regenerate",
				Text:        "Regenerates",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 4),
				ElementType: ui.TextElement,
			},
			{
				Key:         "bomb_regenerate_check",
				SprKey:      "checkbox_false",
				SprKey2:     "checkbox_true",
				Batch:       constants.UIBatch,
				HelpText:    "Whether the bomb regenerates after exploding.",
				Position:    pixel.V(52, 4),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "bomb_regenerate_delay",
				Text:        "Regeneration\nDelay",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, -14),
				ElementType: ui.TextElement,
			},
			{
				Key:         "bomb_regenerate_delay_input",
				SprKey:      constants.TextCaret,
				Text:        "0",
				Batch:       constants.UIBatch,
				HelpText:    "The delay of the bomb's regeneration.",
				Position:    pixel.V(40, -14),
				Color:       pixel.ToRGBA(constants.ColorWhite),
				ElementType: ui.InputElement,
				Width:       1 * world.TileSize,
				Height:      1 * world.TileSize,
			},
			{
				Key:         "bomb_regenerate_delay_minus",
				SprKey:      "minus_btn",
				SprKey2:     "minus_btn_click",
				Batch:       constants.UIBatch,
				Position:    pixel.V(26, -14),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "bomb_regenerate_delay_plus",
				SprKey:      "plus_btn",
				SprKey2:     "plus_btn_click",
				Batch:       constants.UIBatch,
				Position:    pixel.V(54, -14),
				ElementType: ui.ButtonElement,
			},
		},
	}
	JetpackOptionsConstructor = &ui.DialogConstructor{
		Key:    constants.DialogJetpack,
		Width:  8,
		Height: 6,
		Elements: []ui.ElementConstructor{
			{
				Key:         "jetpack_options_title",
				Text:        "Jetpack Options",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-60, 40),
				ElementType: ui.TextElement,
			},
			{
				Key:         "cancel_jetpack_options",
				SprKey:      "cancel_btn_big",
				SprKey2:     "cancel_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Cancel",
				Position:    pixel.V(52, -36),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "confirm_jetpack_options",
				SprKey:      "check_btn_big",
				SprKey2:     "check_btn_click_big",
				Batch:       constants.UIBatch,
				HelpText:    "Confirm",
				Position:    pixel.V(32, -36),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "jetpack_timer",
				Text:        "Flight Time",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 22),
				ElementType: ui.TextElement,
			},
			{
				Key:         "jetpack_timer_input",
				Text:        "3",
				Batch:       constants.UIBatch,
				SprKey:      constants.TextCaret,
				HelpText:    "The delay of the jetpack's regeneration.",
				Position:    pixel.V(40, 22),
				Color:       pixel.ToRGBA(constants.ColorWhite),
				ElementType: ui.InputElement,
				Width:       1 * world.TileSize,
				Height:      1 * world.TileSize,
			},
			{
				Key:         "jetpack_timer_minus",
				SprKey:      "minus_btn",
				SprKey2:     "minus_btn_click",
				Batch:       constants.UIBatch,
				Position:    pixel.V(26, 22),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "jetpack_timer_plus",
				SprKey:      "plus_btn",
				SprKey2:     "plus_btn_click",
				Batch:       constants.UIBatch,
				Position:    pixel.V(54, 22),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "jetpack_regenerate",
				Text:        "Regenerates",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, 4),
				ElementType: ui.TextElement,
			},
			{
				Key:         "jetpack_regenerate_check",
				SprKey:      "checkbox_false",
				SprKey2:     "checkbox_true",
				Batch:       constants.UIBatch,
				HelpText:    "Whether the Jetpack regenerates after running out of fuel.",
				Position:    pixel.V(52, 4),
				ElementType: ui.CheckboxElement,
			},
			{
				Key:         "jetpack_regenerate_delay",
				Text:        "Regeneration\nDelay",
				Color:       pixel.ToRGBA(constants.ColorWhite),
				Position:    pixel.V(-56, -14),
				ElementType: ui.TextElement,
			},
			{
				Key:         "jetpack_regenerate_delay_input",
				Text:        "0",
				SprKey:      constants.TextCaret,
				Batch:       constants.UIBatch,
				Color:       pixel.ToRGBA(constants.ColorWhite),
				HelpText:    "The delay of the jetpack's regeneration.",
				Position:    pixel.V(40, -14),
				ElementType: ui.InputElement,
				Width:       1 * world.TileSize,
				Height:      1 * world.TileSize,
			},
			{
				Key:         "jetpack_regenerate_delay_minus",
				SprKey:      "minus_btn",
				SprKey2:     "minus_btn_click",
				Batch:       constants.UIBatch,
				Position:    pixel.V(26, -14),
				ElementType: ui.ButtonElement,
			},
			{
				Key:         "jetpack_regenerate_delay_plus",
				SprKey:      "plus_btn",
				SprKey2:     "plus_btn_click",
				Batch:       constants.UIBatch,
				Position:    pixel.V(54, -14),
				ElementType: ui.ButtonElement,
			},
		},
	}
}
